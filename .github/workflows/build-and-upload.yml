name: Sync Upstream and Build .deb

on:
  schedule:
    - cron: "0 */6 * * *"  # Runs every 6 hours
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Build even if upstream version is unchanged?'
        required: false
        default: 'false'

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive

    outputs:
      tag_no_v: ${{ steps.parse.outputs.tag_no_v }}

    steps:
    - name: 1 - Checkout your fork
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 2 - Add upstream remote and fetch tags
      run: |
        git remote add upstream https://github.com/mhx/dwarfs.git
        git fetch upstream --tags

    - name: 3 - Determine latest upstream tag
      id: resolve_tag
      run: |
        TAG=$(git ls-remote --tags upstream | grep -o 'refs/tags/v[0-9.]*$' | sed 's#refs/tags/##' | sort -V | tail -n1)
        echo "resolved_tag=$TAG" >> "$GITHUB_OUTPUT"

    - name: 4 - Check if tag exists locally
      id: check
      run: |
        git fetch --tags
        TAG="${{ steps.resolve_tag.outputs.resolved_tag }}"
        if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
          echo "found=true" >> "$GITHUB_OUTPUT"
        else
          echo "found=false" >> "$GITHUB_OUTPUT"
        fi

    - name: 5 - Exit if no new upstream version
      if: steps.check.outputs.found == 'true' && github.event.inputs.force_build != 'true'
      run: |
        echo "No new upstream version. Exiting."
        exit 0

    - name: 5.5 - Info
      run: |
        if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
          echo "::notice title=Test Build::Test build enabled. Running full build."
        fi

    - name: 6 - Parse tag
      id: parse
      run: |
        TAG="${{ steps.resolve_tag.outputs.resolved_tag }}"
        echo "tag_no_v=${TAG#v}" >> "$GITHUB_OUTPUT"

    - name: 7 - Checkout upstream tag
      run: |
        TAG=${{ steps.resolve_tag.outputs.resolved_tag }}
        git fetch upstream --tags
        git checkout -B build-${TAG} ${TAG}

    - name: 8 - Clean upstream workflows
      run: rm -f .github/workflows/*.yml || true

    - name: 9 - Install dependencies
      run: sudo apt update && sudo apt install -y devscripts debhelper dpkg-dev gnupg dput upx

    - name: 10 - Download and decompress binary
      run: |
        TAG=${{ steps.resolve_tag.outputs.resolved_tag }}
        TAG_NO_V="${TAG#v}"
        curl -L "https://github.com/mhx/dwarfs/releases/download/${TAG}/dwarfs-universal-${TAG_NO_V}-Linux-x86_64" -o dwarfs
        chmod +x dwarfs
        upx -d dwarfs || echo "Already decompressed"
        mkdir -p dwarfs-${TAG_NO_V}/usr/bin
        mv dwarfs dwarfs-${TAG_NO_V}/usr/bin/dwarfs

    - name: 11 - Create Debian packaging files
      run: |
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}
        cd dwarfs-${TAG_NO_V}
        mkdir -p debian/source
        echo "Source: dwarfs" > debian/control
        echo "Maintainer: mhx github@mhxnet.de" >> debian/control
        echo "Section: utils" >> debian/control
        echo "Priority: optional" >> debian/control
        echo "Standards-Version: 4.5.0" >> debian/control
        echo "Build-Depends: debhelper (>= 11)" >> debian/control
        echo "" >> debian/control
        echo "Package: dwarfs" >> debian/control
        echo "Version: ${TAG_NO_V}-1" >> debian/control
        echo "Architecture: amd64" >> debian/control
        echo "Depends: fuse3, \${misc:Depends}" >> debian/control
        echo "Description: DwarFS (Deduplicating Warp-speed Advanced Read-only File System)" >> debian/control
        echo " A high-performance read-only file system with built-in compression and deduplication." >> debian/control
        echo " Precompiled universal binary repackaged as a Debian package." >> debian/control
        echo " Includes mkdwarfs, dwarfsck, dwarfsextract, and the FUSE driver." >> debian/control
        echo '#!/usr/bin/make -f' > debian/rules
        echo '%:' >> debian/rules
        echo '	dh $@' >> debian/rules
        echo 'override_dh_auto_build:' >> debian/rules
        echo '	# nothing to build' >> debian/rules
        echo 'override_dh_auto_install:' >> debian/rules
        echo '	mkdir -p debian/dwarfs/usr/bin' >> debian/rules
        echo '	cp -a usr/bin/dwarfs debian/dwarfs/usr/bin/' >> debian/rules
        chmod +x debian/rules
        echo "3.0 (quilt)" > debian/source/format
        echo "12" > debian/compat
        export DEBEMAIL="github@mhxnet.de"
        dch --create -v "${TAG_NO_V}-1" --package dwarfs "New upstream release"

    - name: 12a - Build source package
      run: |
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}
        cd dwarfs-${TAG_NO_V}
        tar czf ../dwarfs_${TAG_NO_V}.orig.tar.gz --exclude=debian --transform="s,^,dwarfs-${TAG_NO_V}/," usr
        dpkg-source -b .

    - name: 12b - Build binary .deb
      run: |
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}
        mkdir -p build-pkg/DEBIAN
        echo "Package: dwarfs" > build-pkg/DEBIAN/control
        echo "Version: ${TAG_NO_V}-1" >> build-pkg/DEBIAN/control
        echo "Section: utils" >> build-pkg/DEBIAN/control
        echo "Priority: optional" >> build-pkg/DEBIAN/control
        echo "Architecture: amd64" >> build-pkg/DEBIAN/control
        echo "Depends: fuse3" >> build-pkg/DEBIAN/control
        echo "Maintainer: mhx <github@mhxnet.de>" >> build-pkg/DEBIAN/control
        echo "Description: DwarFS (Deduplicating Warp-speed Advanced Read-only File System)" >> build-pkg/DEBIAN/control
        echo " A high-performance read-only file system with built-in compression and deduplication." >> build-pkg/DEBIAN/control
        echo " Includes mkdwarfs, dwarfsck, dwarfsextract, and the FUSE driver." >> build-pkg/DEBIAN/control
        mkdir -p build-pkg/usr/bin
        cp dwarfs-${TAG_NO_V}/usr/bin/dwarfs build-pkg/usr/bin/
        chmod 755 build-pkg/usr/bin/dwarfs
        dpkg-deb --build build-pkg dwarfs_${TAG_NO_V}_amd64.deb

    - name: 13 - Import GPG key       # Enable loopback pinentry for non-interactive signing
      id: import_gpg
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg.conf
        echo RELOADAGENT | gpg-connect-agent
        KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/ { print $5; exit }')
        echo "Imported GPG key ID: $KEYID"
        echo "keyid=$KEYID" >> "$GITHUB_OUTPUT"
      env:
        GPG_TTY: ${{ runner.env.TERM }}

#    - name: 14 - Sign source package
#      run: |
#        KEYID=${{ steps.import_gpg.outputs.keyid }}
#        # Use loopback pinentry to supply passphrase
#        # debsign -p "-u $KEYID --pinentry-mode loopback --passphrase '${{ secrets.GPG_PASSPHRASE }}'" dwarfs_*.changes
#        for file in dwarfs_*.dsc dwarfs_*.changes; do
#          debsign -p "-u $KEYID --pinentry-mode loopback --passphrase '${{ secrets.GPG_PASSPHRASE }}'" "$file"
#        done

    - name: 14 - Sign source package
      run: |
        KEYID=${{ steps.import_gpg.outputs.keyid }}
        export GPG_TTY=$(tty)
        echo "$KEYID:6:${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --import-ownertrust
        for file in dwarfs_*.dsc dwarfs_*.changes; do
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
            --default-key "$KEYID" --output "$file.gpg" --detach-sign "$file"
          mv "$file.gpg" "${file%.dsc}.dsc.asc" 2>/dev/null || mv "$file.gpg" "${file%.changes}.changes.asc"
        done

    - name: 15 - Upload to Launchpad
      run: dput ppa:seann-giffin/dwarfs dwarfs_*.changes

    - name: 15.5 - Extract upstream changelog or fallback
      id: changelog
      run: |
        TAG=v${{ steps.parse.outputs.tag_no_v }}
        curl -sL https://raw.githubusercontent.com/mhx/dwarfs/main/CHANGES.md -o changes.md || echo "" > changes.md
        if grep -q "^## $TAG" changes.md; then
          awk "/^## $TAG/,/^## v/" changes.md | sed '$d' > extracted.txt
        else
          git log --pretty=format:"* %s" upstream/${TAG}^..upstream/${TAG} > extracted.txt || echo "See release notes: https://github.com/mhx/dwarfs/releases/tag/$TAG" > extracted.txt
        fi
        {
          echo "notes<<EOF" >> "$GITHUB_OUTPUT"
          cat extracted.txt >> "$GITHUB_OUTPUT"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: 16 - Upload to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.parse.outputs.tag_no_v }}
        name: DwarFS v${{ steps.parse.outputs.tag_no_v }}
        body: ${{ steps.changelog.outputs.notes }}
        draft: false
        prerelease: false
        files: |
          dwarfs_${{ steps.parse.outputs.tag_no_v }}_amd64.deb
          dwarfs_${{ steps.parse.outputs.tag_no_v }}.orig.tar.gz
          dwarfs_${{ steps.parse.outputs.tag_no_v }}.dsc
          dwarfs_${{ steps.parse.outputs.tag_no_v }}.changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

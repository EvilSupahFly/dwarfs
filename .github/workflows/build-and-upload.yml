name: Sync Upstream and Build .deb

on:
  schedule:
    - cron: "0 */6 * * *"  # Runs every 6 hours
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Build even if upstream version is unchanged?'
        required: false
        default: 'false'

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive

    outputs:
      tag_no_v: ${{ steps.parse.outputs.tag_no_v }}

    steps:
    - name: 1 - Checkout your fork
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 2 - Add upstream remote and fetch tags
      run: |
        git remote add upstream https://github.com/mhx/dwarfs.git
        git fetch upstream --tags

    - name: 3 - Determine latest upstream tag
      id: resolve_tag
      run: |
        TAG=$(git ls-remote --tags upstream | grep -o 'refs/tags/v[0-9.]*$' | sed 's#refs/tags/##' | sort -V | tail -n1)
        echo "resolved_tag=$TAG" >> "$GITHUB_OUTPUT"

    - name: 4 - Check if tag exists locally
      id: check
      run: |
        git fetch --tags
        TAG="${{ steps.resolve_tag.outputs.resolved_tag }}"
        if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
          echo "found=true" >> "$GITHUB_OUTPUT"
        else
          echo "found=false" >> "$GITHUB_OUTPUT"
        fi

    - name: 4.5 - Set build decision
      id: decision
      run: |
        if [ "${{ steps.check.outputs.found }}" != "true" ] || [ "${{ github.event.inputs.force_build }}" == "true" ]; then
          echo "should_build=true" >> "$GITHUB_OUTPUT"
        else
          echo "should_build=false" >> "$GITHUB_OUTPUT"
        fi

    - name: 5 - Exit if no new upstream version
      if: steps.decision.outputs.should_build == 'false'
      run: |
        echo "No new upstream version. Exiting."
        exit 0

    - name: 6 - Parse tag
      id: parse
      if: steps.decision.outputs.should_build == 'true'
      run: |
        TAG="${{ steps.resolve_tag.outputs.resolved_tag }}"
        echo "tag_no_v=${TAG#v}" >> "$GITHUB_OUTPUT"

    - name: 7 - Checkout upstream tag
      if: steps.decision.outputs.should_build == 'true'
      run: |
        TAG=${{ steps.resolve_tag.outputs.resolved_tag }}
        git fetch upstream --tags
        git checkout -B build-${TAG} ${TAG}

    - name: 8 - Clean upstream workflows
      if: steps.decision.outputs.should_build == 'true'
      run: rm -f .github/workflows/*.yml || true

    - name: 9 - Install dependencies
      if: steps.decision.outputs.should_build == 'true'
      run: sudo apt update && sudo apt install -y devscripts debhelper dpkg-dev gnupg dput upx

    - name: 10 - Download and decompress binary
      if: steps.decision.outputs.should_build == 'true'
      run: |
        TAG=${{ steps.resolve_tag.outputs.resolved_tag }}
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}
        curl -L "https://github.com/mhx/dwarfs/releases/download/${TAG}/dwarfs-universal-${TAG_NO_V}-Linux-x86_64" -o dwarfs
        chmod +x dwarfs
        upx -d dwarfs || echo "Already decompressed"
        mkdir -p dwarfs-${TAG_NO_V}/usr/bin
        mv dwarfs dwarfs-${TAG_NO_V}/usr/bin/dwarfs

    - name: 11 - Create Debian packaging files
      if: steps.decision.outputs.should_build == 'true'
      run: |
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}
        cd dwarfs-${TAG_NO_V}
        mkdir -p debian/source

        # Source stanza
        echo "usr/bin/dwarfs usr/bin/" > debian/install
        echo "Source: dwarfs" > debian/control
        echo "Maintainer: mhx <github@mhxnet.de>" >> debian/control
        echo "Section: utils" >> debian/control
        echo "Priority: optional" >> debian/control
        echo "Standards-Version: 4.5.0" >> debian/control
        echo "Build-Depends: debhelper (>= 11)" >> debian/control
        echo "" >> debian/control

        # Binary stanza
        echo "Package: dwarfs" >> debian/control
        echo "Architecture: amd64" >> debian/control
        echo "Depends: fuse3, \${misc:Depends}" >> debian/control
        echo "Description: DwarFS (Deduplicating Warp-speed Advanced Read-only File System)" >> debian/control
        echo " A high-performance read-only file system with built-in compression and deduplication." >> debian/control
        echo " Includes mkdwarfs, dwarfsck, dwarfsextract, and the FUSE driver." >> debian/control

        echo '#!/usr/bin/make -f' > debian/rules
        echo '%:' >> debian/rules
        echo '	dh $@' >> debian/rules
        chmod +x debian/rules

        echo "3.0 (native)" > debian/source/format
        echo "12" > debian/compat

        export DEBEMAIL="github@mhxnet.de"
        dch --create -v "${TAG_NO_V}-1" --package dwarfs -D noble "Upstream release of dwarfs ${TAG_NO_V}"
        cd ..

    - name: 12 - Import GPG key
      if: steps.decision.outputs.should_build == 'true'
      id: import_gpg
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo RELOADAGENT | gpg-connect-agent
        KEYID=$(gpg --list-secret-keys --with-colons | awk -F: '/^sec/ { print $5; exit }')
        echo "Imported GPG key ID: $KEYID"
        echo "keyid=$KEYID" >> "$GITHUB_OUTPUT"
      env:
        GPG_TTY: ${{ runner.env.TERM }}

    - name: 13 - Build and sign .deb and source for Launchpad
      if: steps.decision.outputs.should_build == 'true'
      run: |
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}

        # Create orig tarball
        tar czf dwarfs_${TAG_NO_V}.orig.tar.gz --exclude=debian --transform="s,^,dwarfs-${TAG_NO_V}/," dwarfs-${TAG_NO_V}/usr
        
        # Binary build
        cp -r dwarfs-${TAG_NO_V} build-bin
        cd build-bin
        debuild -b -us -uc -d
        cd ..

        # Source build
        cp -r dwarfs-${TAG_NO_V} build-src
        cd build-src
        debuild -S -us -uc -d
        cd ..

        # Sign .dsc and .changes files
        KEYID=${{ steps.import_gpg.outputs.keyid }}
        for f in dwarfs_*_amd64.changes dwarfs_*_source.changes; do
          [ -e "$f" ] && debsign -k"$KEYID" "$f"
        done
      shell: bash

    #- name: 14 - Sign source package
    #  if: steps.decision.outputs.should_build == 'true'
    #  run: |
    #    KEYID=${{ steps.import_gpg.outputs.keyid }}
    #    export GPG_TTY=$(tty)
    #    shopt -s nullglob
    #    files=(dwarfs_*.dsc dwarfs_*.changes)
    #    if [ ${#files[@]} -eq 0 ]; then
    #      echo "No files to sign"
    #      exit 0
    #    fi
    #    for file in "${files[@]}"; do
    #       echo "Signing \"$file\""
    #        gpg --batch --yes --pinentry-mode loopback \
    #          --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
    #          --default-key "$KEYID" \
    #          --output "$file.asc" --detach-sign "$file"
    #        echo "\"$file\" signed successfully"
    #   done
    #  shell: bash

    - name: 14 - Upload everything to Launchpad
      if: steps.decision.outputs.should_build == 'true'
      run: |
        echo "running: dput ppa:seann-giffin/dwarfs dwarfs_*.changes"
        dput ppa:seann-giffin/dwarfs dwarfs_*.changes
      shell: bash

    - name: 15 - Extract upstream changelog or fallback
      if: steps.decision.outputs.should_build == 'true'
      id: changelog
      run: |
        TAG=v${{ steps.parse.outputs.tag_no_v }}
        curl -sL https://raw.githubusercontent.com/mhx/dwarfs/main/CHANGES.md -o changes.md || echo "" > changes.md
        if grep -q "^## $TAG" changes.md; then
          awk "/^## $TAG/,/^## v/" changes.md | sed '$d' > extracted.txt
        else
          git log --pretty=format:"* %s" ${TAG}^..${TAG} > extracted.txt || echo "See release notes: https://github.com/mhx/dwarfs/releases/tag/$TAG" > extracted.txt
        fi
        END_CHANGELOG="EOF_CHANGELOG_${TAG}"
        {
          echo "notes<<${END_CHANGELOG}"
          cat extracted.txt
          echo "$END_CHANGELOG"
        } >> "$GITHUB_OUTPUT"

    - name: 15.5 - Generate and sign SHA256 checksums
      if: steps.decision.outputs.should_build == 'true'
      id: checksums
      run: |
        TAG_NO_V=${{ steps.parse.outputs.tag_no_v }}
        sha256sum dwarfs_${TAG_NO_V}_amd64.deb \
                  dwarfs_${TAG_NO_V}.orig.tar.gz \
                  dwarfs_${TAG_NO_V}.dsc \
                  dwarfs_${TAG_NO_V}.changes > checksums.txt
        gpg --batch --yes --pinentry-mode loopback \
            --passphrase "${{ secrets.GPG_PASSPHRASE }}" \
            --default-key "${{ steps.import_gpg.outputs.keyid }}" \
            --output checksums.txt.asc --detach-sign checksums.txt
        END_CHECKSUMS="EOF_CHECKSUMS_${TAG_NO_V}"
         {
          echo "checksums<<${END_CHECKSUMS}"
          cat checksums.txt
          echo "${END_CHECKSUMS}"
        } >> "$GITHUB_OUTPUT"

    - name: 16 - Upload to GitHub Releases
      if: steps.decision.outputs.should_build == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.parse.outputs.tag_no_v }}
        name: DwarFS v${{ steps.parse.outputs.tag_no_v }}
        body: |
          ${{ steps.changelog.outputs.notes }}

          ## SHA256 Checksums
          ```
          ${{ steps.checksums.outputs.checksums }}
          ```
        draft: false
        prerelease: false
        files: |
          dwarfs_${{ steps.parse.outputs.tag_no_v }}_amd64.deb
          dwarfs_${{ steps.parse.outputs.tag_no_v }}.orig.tar.gz
          dwarfs_${{ steps.parse.outputs.tag_no_v }}.dsc
          dwarfs_${{ steps.parse.outputs.tag_no_v }}.changes
          checksums.txt
          checksums.txt.asc
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

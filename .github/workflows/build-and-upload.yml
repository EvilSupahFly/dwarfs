name: Sync Upstream and Build .deb

on:
  schedule:
    - cron: "0 */6 * * *"  # Run every 6 hours
  workflow_dispatch:

jobs:
  sync-and-build:
    runs-on: ubuntu-latest

    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
    - name: Checkout your fork
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Add upstream remote
      run: |
        git remote add upstream https://github.com/mhx/dwarfs.git
        git fetch upstream --tags

    - name: Get latest upstream tag
      id: upstream
      run: |
        echo "tag=$(git ls-remote --tags upstream | grep -o 'refs/tags/[^{}]*$' | sort -V | tail -n1 | sed 's#refs/tags/##')" >> $GITHUB_OUTPUT

    - name: Check if tag exists locally
      id: checktag
      run: |
        if git rev-parse "refs/tags/${{ steps.upstream.outputs.tag }}" >/dev/null 2>&1; then
          echo "found=true" >> $GITHUB_OUTPUT
        else
          echo "found=false" >> $GITHUB_OUTPUT
        fi

    - name: Exit if tag already exists
      if: steps.checktag.outputs.found == 'true'
      run: |
        echo "No new upstream version. Exiting."
        exit 0
      continue-on-error: false

    - name: Fetch and checkout new upstream tag
      if: steps.checktag.outputs.found == 'false'
      run: |
        git fetch upstream tag ${{ steps.upstream.outputs.tag }}
        git checkout -B update-${{ steps.upstream.outputs.tag }} upstream/${{ steps.upstream.outputs.tag }}
    - name: Remove upstream GitHub workflows
      run: rm -f .github/workflows/*.yml || true

    - name: Copy debian/ directory into working tree
      if: steps.checktag.outputs.found == 'false'
      run: |
        git checkout origin/main -- DEBIAN

    - name: Install dependencies
      if: steps.checktag.outputs.found == 'false'
      run: sudo apt update && sudo apt install -y devscripts debhelper dpkg-dev gnupg dput upx

    - name: Download universal binary and decompress
      if: steps.checktag.outputs.found == 'false'
      run: |
        URL="https://github.com/mhx/dwarfs/releases/download/${{ steps.upstream.outputs.tag }}/dwarfs-universal-${{ steps.upstream.outputs.tag }}-Linux-x86_64"
        curl -L "$URL" -o dwarfs
        chmod +x dwarfs
        upx -d dwarfs || echo "Already decompressed"
        mkdir -p usr/bin
        mv dwarfs usr/bin/dwarfs
        chmod 755 usr/bin/dwarfs

    - name: Prepare source package
      if: steps.checktag.outputs.found == 'false'
      run: |
        mkdir build && cd build
        cp -r ../usr ../DEBIAN .
        tar czf ../dwarfs_${{ steps.upstream.outputs.tag }}.orig.tar.gz usr
        cd ..
        dpkg-source -b .

    - name: Import GPG key
      if: steps.checktag.outputs.found == 'false'
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
        echo RELOADAGENT | gpg-connect-agent
        KEYID=$(gpg --list-keys --with-colons | awk -F: '/^pub/ {print $5}' | head -n1)
        echo "$KEYID" > keyid.txt
        echo "${{ secrets.GPG_PASSPHRASE }}" | /usr/lib/gnupg/gpg-preset-passphrase --preset "$KEYID"
      env:
        GPG_TTY: ${{ runner.env.TERM }}

    - name: Build source package
      if: steps.checktag.outputs.found == 'false'
      run: |
        debuild -S -sa --no-lintian -k"$(cat keyid.txt)"

    - name: Configure dput
      if: steps.checktag.outputs.found == 'false'
      run: |
          cat <<EOF > ~/.dput.cf
          [launchpad]
          fqdn = ppa.launchpad.net
          incoming = ~${{ secrets.LAUNCHPAD_USERNAME }}/ubuntu/${{ secrets.LAUNCHPAD_PPA_NAME }}
          login = anonymous
          method = ftp
          EOF

    - name: Upload to Launchpad
      if: steps.checktag.outputs.found == 'false'
      run: |
        CHANGES_FILE=$(ls ../*.changes | head -n1)
        dput launchpad "$CHANGES_FILE"

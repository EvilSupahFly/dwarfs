name: Sync Upstream and Build .deb

on:
  schedule:
    - cron: "0 */6 * * *"  # Run every 6 hours
  workflow_dispatch:
    inputs:
      use_fake_tag:
        description: 'Use fake tag for testing?'
        required: false
        default: 'false'

jobs:
  sync-and-build:
    runs-on: ubuntu-latest

    env:
      DEBIAN_FRONTEND: noninteractive

    steps:
    - name: 1 - Checkout your fork
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: 2 - Add upstream remote
      run: |
        git remote add upstream https://github.com/mhx/dwarfs.git
        git fetch upstream --tags

    - name: 3 - Get latest upstream tag
      id: upstream
      run: |
        if [[ "${{ github.event.inputs.use_fake_tag }}" == "true" ]]; then
          echo "tag=testing-fake-tag" >> "$GITHUB_OUTPUT"
        else
          TAG=$(git ls-remote --tags upstream | grep -o 'refs/tags/[^{}]*$' | sort -V | tail -n1 | sed 's#refs/tags/##')
          echo "Detected upstream tag: $TAG"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        fi

    - name: 3.5 - Resolve actual latest upstream tag
      id: resolved
      run: |
        if [ "${{ steps.upstream.outputs.tag }}" = "testing-fake-tag" ]; then
          REAL_TAG=$(git ls-remote --tags upstream | grep -o 'refs/tags/[^{}]*$' | sed 's#refs/tags/##' | sort -V | tail -n1)
          echo "resolved_tag=$REAL_TAG" >> $GITHUB_OUTPUT
        else
          echo "resolved_tag=${{ steps.upstream.outputs.tag }}" >> $GITHUB_OUTPUT
        fi

    - name: 4 - Check if tag exists locally
      id: checktag
      run: |
        echo "github.event.inputs.use_fake_tag = ${{ github.event.inputs.use_fake_tag }}"
        echo "steps.upstream.outputs.tag = ${{ steps.upstream.outputs.tag }}"
        echo "steps.resolved.outputs.resolved_tag = ${{ steps.resolved.outputs.resolved_tag }}"
        if git rev-parse "refs/tags/${{ steps.resolved.outputs.resolved_tag }}" >/dev/null 2>&1; then
          echo "found=exists" >> "$GITHUB_OUTPUT"
        else
          echo "found=missing" >> "$GITHUB_OUTPUT"
        fi

    - name: 4.5 - Debug checktag output
      run: |
        echo "github.event.inputs.use_fake_tag = ${{ github.event.inputs.use_fake_tag }}"
        echo "steps.upstream.outputs.tag = ${{ steps.upstream.outputs.tag }}"
        echo "steps.resolved.outputs.resolved_tag = ${{ steps.resolved.outputs.resolved_tag }}"
        echo "steps.checktag.outputs.found = ${{ steps.checktag.outputs.found }}"
        cat "$GITHUB_OUTPUT"

    - name: 5 - Exit if tag already exists
      if: steps.checktag.outputs.found == 'exists'
      run: |
        echo "No new upstream version. Exiting."
        exit 0
      continue-on-error: false

    - name: 5.5 - Debug fallback
      if: steps.checktag.outputs.found == ''
      run: echo "Output was not set properly"

    - name: 6 - Fetch and checkout new upstream tag
      run: |
        echo -e "Resolved tag is ${{ steps.resolved.outputs.resolved_tag }}"
        TAG="${{ steps.resolved.outputs.resolved_tag }}"
        git fetch upstream --tags || true
        git checkout -B update-"$TAG" "upstream/$TAG" || git checkout -b update-"$TAG"

    - name: 7 - Remove upstream GitHub workflows
      run: rm -f .github/workflows/*.yml || true

    - name: 8 - Copy DEBIAN/ directory into working tree
      run: |
        git checkout origin/main -- DEBIAN

    - name: 9 - Install dependencies
      id: parsed
      run: |
        sudo apt update &from the& sudo apt install -y devscripts debhelper dpkg-dev gnupg dput upx
        TAG="${{ steps.resolved.outputs.resolved_tag }}"
        TAG_NO_V="${TAG#v}"
        echo "tag_no_v=$TAG_NO_V" >> "$GITHUB_OUTPUT"

    - name: 10 - Download universal binary and decompress
      run: |
        TAG="${{ steps.resolved.outputs.resolved_tag }}"
        TAG_NO_V="${TAG#v}"
        echo "Resolved tag is ${{ steps.parsed.outputs.resolved_tag }} and TAG is $TAG"
        echo "Parsed tag_no_v is ${{ steps.parsed.outputs.tag_no_v }} and TAG_NO_V is $TAG_NO_V"
        URL="https://github.com/mhx/dwarfs/releases/download/${TAG}/dwarfs-universal-${TAG_NO_V}-Linux-x86_64"
        curl -L "$URL" -o dwarfs
        chmod +x dwarfs
        upx -d dwarfs || echo "Already decompressed"
        mkdir -p dwarfs-${TAG_NO_V}/usr/bin
        mv dwarfs dwarfs-${TAG_NO_V}/usr/bin/dwarfs
        chmod 755 dwarfs-${TAG_NO_V}/usr/bin/dwarfs

    - name: 11 - Prepare source package
      run: |
        TAG="${{ steps.resolved.outputs.resolved_tag }}"
        TAG_NO_V="${TAG#v}"
        echo "steps.parsed.outputs.resolved_tag = ${{ steps.parsed.outputs.resolved_tag }} and TAG is $TAG"
        echo "steps.parsed.outputs.tag_no_v = ${{ steps.parsed.outputs.tag_no_v }}"
        echo "TAG_NO_V = $TAG_NO_V"
        cd dwarfs-${TAG_NO_V}
        mkdir debian
        echo "Source: dwarfs" > debian/control
        echo "Maintainer: mhx github@mhxnet.de" >> debian/control
        echo "Section: utils" >> debian/control
        echo "Priority: optional" >> debian/control
        echo "Standards-Version: 4.5.0" >> debian/control
        echo "Build-Depends: debhelper (>= 11)" >> debian/control
        echo "" >> debian/control
        echo "Package: dwarfs" >> debian/control
        echo "Version: ${TAG_NO_V}-1" >> debian/control
        echo "Architecture: amd64" >> debian/control
        echo "Depends: fuse3, \${misc:Depends}" >> debian/control
        echo "Description: DwarFS (Deduplicating Warp-speed Advanced Read-only File System)" >> debian/control
        echo " A high-performance read-only file system with built-in compression and deduplication." >> debian/control
        echo " Precompiled universal binary repackaged as a Debian package." >> debian/control
        echo " Includes mkdwarfs, dwarfsck, dwarfsextract, and the FUSE driver." >> debian/control
        echo '#!/usr/bin/make -f' > debian/rules
        echo '%:' >> debian/rules
        echo '	dh $@' >> debian/rules
        echo 'override_dh_auto_build:' >> debian/rules
        echo '	# nothing to build' >> debian/rules
        echo 'override_dh_auto_install:' >> debian/rules
        echo '	mkdir -p debian/dwarfs/usr/bin' >> debian/rules
        echo '	cp -a usr/bin/dwarfs debian/dwarfs/usr/bin/' >> debian/rules
        chmod +x debian/rules
        export DEBEMAIL="github@mhxnet.de"
        dch --create -v "${TAG_NO_V}-1" --package dwarfs "New upstream release"
        echo "12" > debian/compat

    - name: 12 - Build packages
      run: |
        TAG_NO_V="${{ steps.parsed.outputs.tag_no_v }}"
        cd dwarfs-${TAG_NO_V}

        tar czf ../dwarfs_${TAG_NO_V}.orig.tar.gz --exclude=debian --transform="s,^,dwarfs-${TAG_NO_V}/," usr        # Create .orig.tar.gz from source dir (excluding debian/)
        dpkg-source -b .        # Build source package for Launchpad
        cd ..
        mkdir -p build-pkg/DEBIAN
        cp dwarfs-${TAG_NO_V}/debian/control build-pkg/DEBIAN/control
        mkdir -p build-pkg/usr/bin
        cp dwarfs-${TAG_NO_V}/usr/bin/dwarfs build-pkg/usr/bin/
        chmod 755 build-pkg/usr/bin/dwarfs
        dpkg-deb --build debian/dwarfs ../dwarfs_${TAG_NO_V}_amd64.deb        # Build binary .deb (for GitHub Releases)

    - name: 13 - Import GPG key
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
        echo -e "trust\n5\ny\n" | gpg --command-fd 0 --batch --edit-key "${{ secrets.GPG_KEY_ID }}"
        echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
        echo RELOADAGENT | gpg-connect-agent
        KEYID=$(gpg --list-keys --with-colons | awk -F: '/^pub/ {print $5}' | head -n1)
        echo "$KEYID" > keyid.txt
        echo "${{ secrets.GPG_PASSPHRASE }}" | /usr/lib/gnupg/gpg-preset-passphrase --preset "$KEYID"
      env:
        GPG_TTY: ${{ runner.env.TERM }}

    - name: 14 - Sign Packages
      run: |
        debsign -k"${{ secrets.GPG_KEY_ID }}" --re-sign ../dwarfs_*.dsc
        debsign -k"${{ secrets.GPG_KEY_ID }}" --re-sign ../dwarfs_*.changes

    - name: 15 - Upload to Launchpad
      run: |
        dput ppa:seann-giffin/dwarfs ../dwarfs_*.changes

    - name: 16 - Upload to GitHub Releases
    uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.parsed.outputs.tag_no_v }}
        name: DwarFS v${{ steps.parsed.outputs.tag_no_v }}
        files: |
          dwarfs_${{ steps.parsed.outputs.tag_no_v }}_amd64.deb
          dwarfs_${{ steps.parsed.outputs.tag_no_v }}.orig.tar.gz
          dwarfs_${{ steps.parsed.outputs.tag_no_v }}.dsc
          dwarfs_${{ steps.parsed.outputs.tag_no_v }}.changes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
